program
	/*Arranjos com varias dimensoes*/	
	type matriz = (1:20, O:30,10:50, 2:10) integer;
	integer: i, j;
	matriz: m, n, z;
/*Arranjos como valor, referencia, e valor resultado*/
integer procedure doit(va1ue matriz: m, reference matriz: n, value result matriz: z):
	integer : i;
	integer : j;
begin
	m(7, 3, 15, 5) := i; /* arranjo como l-value*/
	if i < j then
		i := j;
		i := O
	else
		j := i;
		j := O
	endif;
	While true do /* 10op com constante booleana*/
		i := i - 1;
		i := j / i;
		j := n(3, 5, 8);
		i := doit(n, m, z) /* chamada recursiva*/
	endwhile
	return i+1
end;
begin
	repeat /* expressao complexa envolvendo arranjos:*/
		i := i + 2 - j / i ** 2 + 5 -m(2, 3, 4) +n(3, 4, 5) **-m(10, 29, 7);
		j := i ** -(1/2)
	until i = O;
	if i not= j then /* varios exits dentro de um laco*/
		while i not= j do
			read i;
if (i = 0) then exit;
		i := i + 1;
		read j;
	if (j <= 0) then exit;
	j:=j-1;
		endwhile
	endif;
	i := doit(m, n, 2) /* chamada & procedimento retornado valor*/
end
